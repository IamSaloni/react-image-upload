{"version":3,"sources":["logo.svg","Components/Upload.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Upload","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","fileInput","React","createRef","imgOutput","state","sources","event","preventDefault","_this2","console","log","current","files","keys","forEach","key","index","reader","FileReader","onload","setState","concat","toConsumableArray","target","result","readAsDataURL","_this3","react_default","a","createElement","onSubmit","handleOnSubmit","ref","onChange","handleOnchange","type","name","accept","multiple","map","source","src","alt","Component","App","className","Components_Upload","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iGAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,kMCuDzBC,cApDX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,UAAYC,IAAMC,YACvBT,EAAKU,UAAYF,IAAMC,YACvBT,EAAKW,MAAQ,CACTC,QAAS,IALEZ,8EAYJa,GACXA,EAAMC,wDAIKD,GAAO,IAAAE,EAAAZ,KAClBa,QAAQC,IAAIJ,GACZG,QAAQC,IAAId,KAAKI,UAAUW,QAAQC,OAEnClB,OAAOmB,KAAKjB,KAAKI,UAAUW,QAAQC,OAAOE,QAAQ,SAACC,EAAKC,GACpD,IAAIC,EAAS,IAAIC,WACjBD,EAAOE,OAAS,SAACb,GAEbE,EAAKY,SAAS,CACVf,QAAO,GAAAgB,OAAA3B,OAAA4B,EAAA,EAAA5B,CAAMc,EAAKJ,MAAMC,SAAjB,CAA0BC,EAAMiB,OAAOC,YAItDP,EAAOQ,cAAcjB,EAAKR,UAAUW,QAAQC,MAAMG,uCAMjD,IAAAW,EAAA9B,KACL,OACI+B,EAAAC,EAAAC,cAAA,2BAEIF,EAAAC,EAAAC,cAAA,QAAMC,SAAU,SAACxB,GAAD,OAAWoB,EAAKK,eAAezB,KAC3CqB,EAAAC,EAAAC,cAAA,SAAOG,IAAKpC,KAAKI,UAAWiC,SAAU,SAAC3B,GAAD,OAAWoB,EAAKQ,eAAe5B,IAAQ6B,KAAK,OAAOC,KAAK,SAASC,OAAO,mCAAmCC,UAAQ,KAE5J1C,KAAKQ,MAAMC,QAAQkC,IAAI,SAACC,EAAQxB,GAC7B,OAAQW,EAAAC,EAAAC,cAAA,OAAKd,IAAKC,EAAOyB,IAAKD,EAAQE,IAAG,SAAArB,OAAWL,EAAQ,eA7C3Df,IAAM0C,WCcZC,mLARX,OACEjB,EAAAC,EAAAC,cAAA,OAAKgB,UAAU,OACblB,EAAAC,EAAAC,cAACiB,EAAD,cAJUH,aCMEI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1B,EAAAC,EAAAC,cAACyB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ac6384d5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\n\r\nclass Upload extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.fileInput = React.createRef()\r\n        this.imgOutput = React.createRef()\r\n        this.state = {\r\n            sources: []\r\n        }\r\n    }\r\n    // componentDidMount() {\r\n    //     console.log(this.fileInput.files);\r\n    // }\r\n\r\n    handleOnSubmit(event) {\r\n        event.preventDefault();\r\n    }\r\n\r\n\r\n    handleOnchange(event) {\r\n        console.log(event);\r\n        console.log(this.fileInput.current.files);\r\n\r\n        Object.keys(this.fileInput.current.files).forEach((key, index) => {\r\n            let reader = new FileReader()\r\n            reader.onload = (event) => {\r\n                // this.imgOutput.current.src = event.target.result\r\n                this.setState({\r\n                    sources: [...this.state.sources, event.target.result]\r\n                })\r\n\r\n            }\r\n            reader.readAsDataURL(this.fileInput.current.files[key])\r\n        })\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                Upload Images\r\n                <form onSubmit={(event) => this.handleOnSubmit(event)}>\r\n                    <input ref={this.fileInput} onChange={(event) => this.handleOnchange(event)} type=\"file\" name=\"myFile\" accept=\"image/png, image/jpeg ,image/jpg\" multiple />\r\n                </form>\r\n                {this.state.sources.map((source, index) => {\r\n                    return (<img key={index} src={source} alt={`image ${index + 1}`} />)\r\n                })}\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Upload","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Upload from './Components/Upload'\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Upload />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}