{"version":3,"sources":["logo.svg","Components/Upload.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Upload","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","fileInput","React","createRef","state","files","deleteFiles","pushFileInState","bind","assertThisInitialized","event","preventDefault","evt","file","setState","concat","toConsumableArray","source","target","result","name","_this2","filter","includes","_this3","keys","current","forEach","key","reader","FileReader","onload","readAsDataURL","e","checked","fileName","_this4","console","log","react_default","a","createElement","onSubmit","handleOnSubmit","ref","onChange","handleOnchange","type","accept","multiple","className","style","length","display","onClick","handleOnClick","map","_ref","index","src","alt","handleCheckbox","Component","App","Components_Upload","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d40e23bd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\n\r\nclass Upload extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.fileInput = React.createRef();\r\n        this.state = {\r\n            files: [],\r\n            deleteFiles: []\r\n        }\r\n        this.pushFileInState = this.pushFileInState.bind(this);\r\n    }\r\n\r\n    handleOnSubmit(event) {\r\n        event.preventDefault();\r\n    }\r\n\r\n    pushFileInState(evt, file) {\r\n        this.setState({\r\n            files: [...this.state.files, {\r\n                source: evt.target.result,\r\n                name: file.name\r\n            }]\r\n        })\r\n    }\r\n\r\n    handleOnClick () {\r\n        this.setState({\r\n            files: this.state.files.filter((file)=>{\r\n                return !(this.state.deleteFiles.includes(file.name))\r\n            })\r\n        }, this.setState({\r\n            deleteFiles: []\r\n        }))\r\n    }\r\n\r\n\r\n    handleOnchange(event) {\r\n        Object.keys(this.fileInput.current.files).forEach((key) => {\r\n            let reader = new FileReader()\r\n            reader.onload = ((file) => {\r\n                return (event) => {\r\n                    this.pushFileInState(event, file)\r\n                  };\r\n\r\n            })(this.fileInput.current.files[key]);\r\n            reader.readAsDataURL(this.fileInput.current.files[key])\r\n        })\r\n    }\r\n\r\n    handleCheckbox (e, name) {\r\n        if(e.target.checked){\r\n            this.setState({\r\n                deleteFiles: [...this.state.deleteFiles, name ]\r\n            });\r\n        }\r\n        else {\r\n            this.setState({\r\n                deleteFiles: this.state.deleteFiles.filter((fileName)=>{\r\n                    return fileName !== name\r\n                })\r\n            });\r\n        }\r\n    }\r\n    render() {\r\n        console.log(this.state.deleteFiles)\r\n        return (\r\n            <div>\r\n                Upload Images\r\n\r\n                <form onSubmit={(event) => this.handleOnSubmit(event)}>\r\n                    <input ref={this.fileInput}\r\n                        onChange={(event) => this.handleOnchange(event)}\r\n                        type=\"file\"\r\n                        name=\"myFile\"\r\n                        accept=\"image/png, image/jpeg ,image/jpg\"\r\n                        multiple\r\n                        className=\"browse-button\"/>\r\n                </form>\r\n                <button style={ (this.state.deleteFiles.length) ? {} : {display:'none'}} onClick={() => this.handleOnClick()}>Delete</button>\r\n                <div className=\"flex-container\">\r\n                    {this.state.files.map(({source, name}, index) => {\r\n                        return (<div key={`image ${index + 1}`}  className=\"item\">\r\n                                    <img src={source} alt={ name }  />\r\n                                    <div className=\"desc\">\r\n                                        <div className=\"caption\"> { name } </div>\r\n                                        <input type=\"checkbox\" checked={this.state.deleteFiles.includes(name)} onChange={(event)=> this.handleCheckbox(event, name)}/>\r\n                                    </div>\r\n                                </div>);\r\n                    })}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Upload","import React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Upload from './Components/Upload'\r\n\r\n\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Upload />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}